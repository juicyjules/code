#!/usr/bin/python
import julesCal as cal
import sys
from datetime import date
class anal():
	def __init__(self,filename,person1,person2):
		self.persons = [person1,person2]
		self.chat = open(filename,"r")
		self.chatText = self.chat.read().splitlines()
		self.amountMessages = len(self.chatText)
		self.firstDate,self.firstTime = self.parseDate(self.chatText[0])
		self.lastDate,self.lastTime = self.parseDate(self.chatText[-1])
		self.days,self.times = self.msgPerDay()
		self.chatDays = self.getTotalDays()
		self.percentageWritten = (len(self.days) / self.chatDays) * 100
		self.writers = self.msgPerPerson()
		self.percentagePerPerson = self.percPerPerson()
		self.messagesWeekdays = self.msgPerWeekday()
		self.wordCount = self.wordUsage()
		self.purgedWordCount = self.purgeLowVal(30,self.wordCount)
		self.averageMessageLength = self.avgMsgLen()
		self.averageWordLength = self.avgWordLen()
	def msgPerDay(self):
		days = {}
		times = {}
		for line in self.chatText:
			if(line==""):
				pass
			else:
				date,time = self.parseDate(line)
				if(not date):
					pass
				elif(date in days):
					days[date]+=1
				else:
					days[date]=1
				if(not time):
					pass
				elif(time in times):
					times[time]+=1
				else:
					times[time]=1
		return days,times
	def msgPerWeekday(self):
		weekdays = ["Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag","Sonntag"]
		w={}
		for date,value in self.days.items():
			wd = weekdays[self.wDay(date)]
			if(wd==-1):
				pass
			elif(wd in w):
				w[wd] +=value
			else:
				w[wd]=value
		return w
	def avgMsgLen(self):
		total = self.amountMessages
		sum = 0
		for line in self.chatText:
			sum += self.getMsgLen(line)
		return sum/total
	def avgWordLen(self):
		total = 0
		sum = 0
		for line in self.chatText:
			words = self.getWords(line)
			for word in words:
				sum+=len(word)
				total+=1
		return sum/total
	def msgPerPerson(self):
		writers = {}
		for line in self.chatText:
			if(line==""):
				pass
			else:
				writer = self.writer(line)
				if(writer=="im fucking lazy"):
					pass
				elif(writer in writers):
					writers[writer]+=1
				else:
					writers[writer]=1
		return writers
	def percPerPerson(self):
		#total = self.writers[self.persons[0]] + self.writers[self.persons[1]]
		total = self.amountMessages
		return {self.persons[0]:self.writers[self.persons[0]]/total *100, self.persons[1]:self.writers[self.persons[1]]/total*100}
	def parseDate(self,line):
		date = ""
		time = ""
		if(not line[0].isdigit()):
			return False,False
		for c in line:
			if(c==","):
				break
			if(c==""):
				pass
			else:
				line = line[1:]
				date+=c
		for c in line:
			if(c=="M"):
				time+=c
				break;
			if(c==" " or c==","):
				pass
			else:
				time+=c;
		if((len(date)<6 or len(date)>8) and (len(time)<6 or len(time)>7)):
			return False,False
		return date,time
	def writer(self,line):
		if(self.persons[0] in line and not self.persons[1] in line):
			return self.persons[0]
		if(self.persons[1] in line and not self.persons[0] in line):
			return self.persons[1]
		else:
			return "im fucking lazy"

	def getTotalDays(self):
		g =cal.gregor()
		f = self.firstDate.split("/")
		l = self.lastDate.split("/")
		val = g.daydiff(cal.date(l[1],l[0],("20"+l[2])),cal.date(f[1],f[0],("20" + f[2])))
		return val
	def wDay(self,d):
		s = d.split("/")
		if(len(s)!=3):
			return -1
		dudu = date(int("20"+s[2]),int(s[0]),int(s[1]))
		return dudu.weekday()
	def getWords(self,line):
		flag = False
		for c in line:
			if(c==":" and flag):
				line = line[1:]
				break
			elif(c==":"):
				flag=True
				line = line[1:]
			else:
				line = line[1:]
		return line.split(" ")
	def getMsgLen(self,line):
		flag = False
		for c in line:
			if(c==":" and flag):
				line = line[1:]
				break
			elif(c==":"):
				flag=True
				line = line[1:]
			else:
				line = line[1:]
		return len(line)
	def wordUsage(self):
		wordCount={}
		for line in self.chatText:
			words = self.getWords(line)
			for word in words:
				word = word.replace(".","").replace(",","")
				if(word==""):
					pass
				elif(word.lower() in wordCount):
					wordCount[word.lower()] +=1
				else:
					wordCount[word.lower()]=1
		return wordCount
	def purgeLowVal(self,treshold,dict):
		newd ={}
		for key,val in dict.items():
			if val>=treshold:
				newd[key]=val
		return newd
	def status(self,dump=False):
		print("-------- ANALYSE GO --------")
		print("Chatteilnehmer: " + self.persons[0] + " und " + self.persons[1])
		print("Start des Chats:",self.firstDate ,self.firstTime)
		print("Ende des Chats:",self.lastDate,self.lastTime)
		print("Zeitraum:",self.chatDays,"Tage")
		print("Anzahl Nachrichten:",self.amountMessages)
		print("Avg. Nachrichtenlänge:"+str(self.averageMessageLength)[:5])
		print("Anzahl Wörter:",len(self.wordCount))
		print("Avg. Wortlänge:"+str(self.averageWordLength)[:5])
		print("Prozent, Tage an denen Geschrieben wurde: "+ str(self.percentageWritten)[:5] +"%")
		print("Schreibanteile:\n",(str(self.persons[0])+ ": "+str(self.percentagePerPerson[self.persons[0]])[:5] +"%\n"),(str(self.persons[1])+ ": "+str(self.percentagePerPerson[self.persons[1]])[:5] +"%"))
		print("MaxTag:",max(self.days,key=self.days.get),self.days[max(self.days,key=self.days.get)],"Nachrichten")
		print("MaxTime:",max(self.times,key=self.times.get),self.times[max(self.times,key=self.times.get)],"Nachrichten")
		print("MaxWeekday:",max(self.messagesWeekdays,key=self.messagesWeekdays.get),self.messagesWeekdays[max(self.messagesWeekdays,key=self.messagesWeekdays.get)],"Nachrichten")
		print("MaxWord:",max(self.wordCount,key=self.wordCount.get),self.wordCount[max(self.wordCount,key=self.wordCount.get)])
		for word in ["liebe","du","ich","wir","gut","schlecht","haha","leben","ahnung"]:
			try:
				print("Anzahl",word,":",self.wordCount[word])
			except KeyError:
				print("Anzahl",word,":",0)
		print("-------- ANALYSE END --------")
		if dump:
			print("--------- DATA DUMP ---------")
			print("----------- DAYS ------------")
			for c,v in self.days.items():
				x = 10-len(c)
				print(c,(x*" "),"|",v)
			print("--------- DAYS END ----------")
			print("----------- TIMES -----------")
			for c,v in self.times.items():
				x = 10-len(c)
				print(c,(x*" "),"|",v)
			print("--------- TIMES END ---------")
			print("---------- WORDS ------------")
			for c in sorted(self.purgedWordCount,key=self.purgedWordCount.get,reverse=True):
				x = 12-len(c)
				print(c,(x*" "),"|",self.purgedWordCount[c])
			print("-------- WORDS END ----------")
			print("------- DATA DUMP END -------")

if __name__ == '__main__':
	if len(sys.argv)<4:
		print("Fucked Up your Input mate...")
	anal = anal(sys.argv[1],sys.argv[2],sys.argv[3])
	if len(sys.argv)==4:
		anal.status()
	else:
		anal.status(True)
